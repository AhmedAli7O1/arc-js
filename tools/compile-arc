#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import os
import re
import argparse
import json
from subprocess import Popen, PIPE
from datetime import datetime

def main():
    argparser = argparse.ArgumentParser()
    argparser.add_argument('-o', type=str, metavar='file', help='output file.')
    argparser.add_argument('file', nargs='+', type=str, help='input files.', metavar='file')
    options = argparser.parse_args()
    if options.o is not None:
        out = open(options.o, 'w')
    else:
        out = sys.stdout
    try:
        out.write("""// This is an auto generated file.
// Compiled from %s on %s.
// DON'T EDIT !!!
var preload = [""" % (map(os.path.realpath, options.file), datetime.now().strftime("%Y-%m-%d %H:%M:%S"),))
        for file in options.file:
            with open(file, 'r') as _input:
                compiler_path = os.path.dirname(os.path.realpath(__file__)) + "/helper-compiler/compiler-file.arc"
                p = Popen(["arc", compiler_path], stdout=PIPE, stdin=_input, stderr=PIPE)
                res, err = p.communicate()
                if 0 < len(err.decode('utf-8')):
                    raise Exception(err.decode('utf-8'))
                for line in res.decode('utf-8').split('\n'):
                    if line != '':
                        out.write('\n' + json.dumps(line) + ',')
        out.write("\n];")
    except:
        if options.o is not None:
            out.close()
            os.unlink(options.o)
        raise

if __name__ == '__main__':
    main()
