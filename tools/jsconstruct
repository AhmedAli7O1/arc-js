#!/usr/bin/python

## This is a JavaScript concatenate utility.
## Copylight (C) smihica Mit Licence.

##
## Providing syntax. (javascript)
##
## 1. #include "./abc.js"
##
## 2. #ifdef VAR1
##      console.log('VAR1 is set');
##    #elif  VAR2
##      console.log('VAR2 is set');
##    #else
##      console.log('Neither VAR1 nor VAR2 is set.')
##    #endif
##
## 3. var def = require("./def.js");
##


import sys, os, re, argparse, random
from cStringIO import StringIO

class ApplicationException(Exception):
    pass

def gencharset(spec):
    retval = u''
    for item in re.finditer(ur'([^\\-]|\\-|\\\\)(?:-([^\\-]|\\-|\\\\))?', spec):
        if item.group(2):
            retval += ''.join(unichr(c) for c in range(ord(item.group(1)), ord(item.group(2)) + 1))
        else:
            retval += item.group(1)
    return retval

class IDGenerator(object):
    INITIAL_CHARS = gencharset("A-Za-z_")
    SUCCEEDING_CHARS = gencharset("0-9A-Za-Z_")

    def __init__(self):
        self.generated = set()

    def __call__(self):
        retval = random.choice(self.__class__.INITIAL_CHARS)
        for i in range(0, 15):
            retval += random.choice(self.__class__.SUCCEEDING_CHARS)
        return retval

class Processor(object):
    def __init__(self):
        self.included_files = set()
        self.search_path = set(['.'])
        self.libs = {}
        self.out = StringIO()
        self.idgen = IDGenerator()

    def lookup_file(self, file, includer=None):
        for dir in self.search_path:
            if os.path.isabs(dir):
                path = os.path.join(dir, file)
            else:
                if includer is None:
                    raise ApplicationException("Relative path specified but no includer given")
                path = os.path.join(os.path.dirname(includer), dir, file)
            if os.path.exists(path):
                return os.path.normpath(path)
        return None

    def in_ifstmt(self, if_stack):
        for i in if_stack:
            if i[1] != 'MATCHED':
                return False
        else:
            return True

    def is_true_env(self, name):
        env = os.getenv(name)
        return env and (env.lower() in ('yes', 'y', 'true', '1'))

    def compose_source(self, file, out):
        self.included_files.add(file)
        with open(file, 'r') as f:
            fname    = os.path.basename(file)
            line_num = 0
            if_stack = []
            out.write('/** @file %s { */\n' % fname)
            for line in f:
                line_num = line_num + 1
                macro_line = re.match(r'^#([^ \n]+)\s*([^ \n]*)\s*([^ \n]*)$', line)
                if macro_line:
                    op, arg, arg2 = macro_line.groups()
                    op = op.strip()
                    if op == 'include':
                        if not self.in_ifstmt(if_stack): continue
                        included_file_name = arg.strip(' "()')
                        if not included_file_name:
                            raise ApplicationException("include file is not specified -- %s L%s" % (fname, line_num, ))
                        included = self.lookup_file(included_file_name, file)
                        if included in self.included_files:
                            continue
                        if included is None:
                            raise ApplicationException("File not found: %s -- %s L%s" % (included_file_name, fname, line_num, ))
                        self.compose_source(included, out)
                    elif op == 'ifdef':
                        if not arg:
                            raise ApplicationException("ifdef argument is not specified -- %s L%s" % (fname, line_num, ))
                        if_stack.append(['ifdef', 'NOT_MATCHED'])
                        if self.is_true_env(arg):
                            if_stack[-1][1] = 'MATCHED'
                    elif op == 'ifndef':
                        if not arg:
                            raise ApplicationException("ifdef argument is not specified -- %s L%s" % (fname, line_num, ))
                        if_stack.append(['ifndef', 'NOT_MATCHED'])
                        if not self.is_true_env(arg):
                            if_stack[-1][1] = 'MATCHED'
                    elif op == 'elif':
                        if not arg:
                            raise ApplicationException("elif argument is not specified -- %s L%s" % (fname, line_num, ))
                        if if_stack[-1][1] == 'NOT_MATCHED':
                            if ((if_stack[-1][0] == 'ifdef'  and self.is_true_env(arg)) or
                                (if_stack[-1][0] == 'ifndef' and not self.is_true_env(arg))):
                                if_stack[-1][1] = 'MATCHED'
                        else:
                            if_stack[-1][1] = 'CONSUMED'
                    elif op == 'else':
                        if if_stack[-1][1] == 'NOT_MATCHED':
                            if_stack[-1][1] = 'MATCHED'
                        else:
                            if_stack[-1][1] = 'CONSUMED'
                    elif op == 'endif':
                        if_stack.pop()
                    else:
                        raise ApplicationException("unknown macro operation: %s -- %s L%s" % (op, fname, line_num, ))
                else:
                    if not self.in_ifstmt(if_stack): continue
                    def repl(match):
                        required_file_name = match.group(2)
                        required = self.lookup_file(required_file_name, file)
                        if required is None:
                            raise ApplicationException("File not found: %s -- %s L%s" % (required_file_name, fname, line_num, ))
                        pair = self.libs.get(required)
                        if pair is None:
                            id = self.idgen()
                            self.libs[required] = (id, None)
                            out = StringIO()
                            self.compose_source(required, out)
                            pair = self.libs[required] = (id, out.getvalue())
                        return "__LIBS__['%s']" % pair[0]
                    line = re.sub(r'''require\s*\((["])(.+)(\1)\)''', repl, line)
                    out.write(line)
            out.write('/** @} */\n')

    def read(self, file):
        self.compose_source(file, self.out)

    def write(self, out):
        # TODO: dependency resolution
        if self.libs:
            out.write("(function () {\n")
            out.write("var __LIBS__ = {};\n")
            for path, pair in self.libs.iteritems():
                out.write("__LIBS__['%s'] = (function (exports) { (function () { %s })(); return exports; })({});\n" % pair)
                first = False
            out.write(self.out.getvalue())
            out.write("})();\n")
        else:
            out.write(self.out.getvalue())

def main():
    argparser = argparse.ArgumentParser()
    argparser.add_argument('-o', type=str, metavar='file', help='output file.')
    argparser.add_argument('file', nargs='+', type=str, help='input files.', metavar='file')
    options = argparser.parse_args()
    if options.o is not None:
        out = open(options.o, 'w')
    else:
        out = sys.stdout
    try:
        p = Processor()
        for file in options.file:
            p.read(os.path.abspath(file))
        p.write(out)
    except:
        if options.o is not None:
            out.close()
            os.unlink(options.o)
        raise

if __name__ == '__main__':
    try:
        main()
    except ApplicationException as e:
        print >>sys.stderr, e.message
