#!/usr/bin/env node
var term = 'arc> ';
var readline = require('readline');
var ArcJS = require('./arc.js');
var vm = new ArcJS.VM();

var rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false
});

function compile(expr) {
  var asm = [
    ['frame', 8],
    ['constant', expr],
    ['argument'],
    ['constant', 1],
    ['argument'],
    ['refer-global', 'do-compile'],
    ['indirect'],
    ['apply'],
    ['halt']
  ];
  vm.cleanup();
  vm.set_asm(asm);
  return vm.run();
}

var code_hist = '';
function onenter(code) {
  var expr = null, res = null, result = '', err = false;
  if (code.match(/^(\s*;+.*\n|\n)$/) && code_hist === '') return false;
  try {
    expr = vm.reader.read(code_hist + code);
  } catch (e) {
    if (vm.reader.i < vm.reader.slen) {
      result = e.toString();
      err = true;
    }
    else { /* Not closed yet. ignore.*/
      code_hist += code;
      return true;
    }
  }
  if (result === ArcJS.Reader.EOF) {
    if (code_hist === '') {
      return false;
    } else {
      code_hist += code;
      return true;
    }
  }
  if (!err) {
    var called_ns = vm.namespace;
    try {
      var compiled = compile(expr);
      vm.cleanup();
      vm.load(compiled);
      res =  vm.run();
      result = ArcJS.stringify(res);
    } catch (e) {
      result = e.toString();
      vm.namespace = called_ns;
      err = true;
    }
  }
  process.stdout.write(result + "\n");
  code_hist = '';

  var ns = vm.namespace;
  var nss = '';
  while (ns !== ArcJS.NameSpace.root) {
    nss = '::' + ns.name + nss;
    ns = ns.upper;
  }
  term = 'arc' + nss + '> ';

  return false;
}

rl.on('line', function (code) {
  var continue_flag = onenter(code+'\n');
  if (!continue_flag) process.stdout.write(term);
});

process.stdout.write(term);
