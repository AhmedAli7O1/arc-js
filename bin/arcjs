#!/usr/bin/env node

var fs = require('fs');
var term = 'arc> ';
var readline = require('readline');
var ArcJS = require('../arc.js');
var runner = ArcJS.context();
var vm = runner.vm;

var rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false
});

function compile(expr) {
  var asm = [
    ['frame', 8],
    ['constant', expr],
    ['argument'],
    ['constant', 1],
    ['argument'],
    ['refer-global', 'do-compile'],
    ['indirect'],
    ['apply'],
    ['halt']
  ];
  vm.cleanup();
  vm.set_asm(asm);
  return vm.run();
}

var code_hist = '';
function onenter(code) {
  var expr = null, res = null, result = '', err = false;
  if ((code.match(/^\s*$/)) && code_hist === '') return false;

  var code_all = code_hist + code;

  do {

    try {
      expr = vm.reader.read(code_all);
      if (expr === ArcJS.Reader.EOF) return false;
    } catch (e) {
      if (vm.reader.i < vm.reader.slen) {
        result = e.toString();
        err = true;
      }
      else { /* Not closed yet. ignore.*/
        code_hist = code_all;
        return true;
      }
    }
    if (result === ArcJS.Reader.EOF) {
      if (code_hist === '') {
        return false;
      } else {
        code_hist = code_all;
        return true;
      }
    }
    if (!err) {
      var called_ns = vm.ns;
      var called_current_ns = vm.current_ns;
      try {
        var compiled = compile(expr);
        vm.cleanup();
        vm.load(compiled);
        res =  vm.run();
        result = ArcJS.stringify(res);
      } catch (e) {
        result = e.toString();
        vm.ns = called_ns;
        vm.current_ns = called_current_ns;
        err = true;
      }
    }
    if (err) {
      process.stderr.write(result + "\n");
      var call_stack_str = vm.get_call_stack_string();
      process.stderr.write(call_stack_str + "\n");
    } else {
      process.stdout.write(result + "\n");
    }
    if (vm.warn !== "") {
      process.stderr.write(vm.warn + "\n");
    }

    code_hist = '';
    code_all = vm.reader.str.slice(vm.reader.i);

    term = 'arc' + ((vm.current_ns.name !== 'user') ?
                    ':' + vm.current_ns.name :
                    '') + '> ';

  } while (code_all !== '');

  return false;
}

function main(mode, scripts) {

  (function prepare(i, after) {
    if (scripts.length <= i) return after();
    fs.readFile(scripts[i], 'utf8', function(err, data) {
      if (err) throw new Error(err);
      if (scripts[i].match(/\.fasl$/)) {
        eval('var fasl = (function() {\nvar preloads = [], preload_vals = [];\n' + data +
             'return {preloads: preloads, preload_vals: preload_vals};\n})();');
        runner.vm.init_def(fasl.preloads, fasl.preload_vals);
      } else {
        runner.evaluate(data);
      }
      prepare(i+1, after);
    });
  })(0, function after() {
    if (mode === 'run') process.exit(0);

    rl.on('line', function (code) {
      var continue_flag = onenter(code+'\n');
      if (!continue_flag) process.stdout.write(term);
    });

    process.stdout.write(term);
  });
}

var argv = process.argv.slice(2);
var scripts = [];
var mode = 'repl';
for (var i=0,l=argv.length; i<l; i++) {
  if (argv[i] === '--run' || argv[i] === '-r') {
    mode = 'run';
    scripts = argv.slice(i+1);
    break;
  }
  scripts.push(argv[i]);
}

if (-1 < scripts.indexOf('-h') || -1 < scripts.indexOf('--help')) {
  console.log('arcjs -- Arc language interpreter or REPL written in JavaScript');
  console.log('');
  console.log('Usage: arcjs [options] preload-file [preload-files ... ] | -r run-file [run-files ... ]');
  console.log('  -h, --help                          : show help');
  console.log('  -v, --version                       : show version');
  console.log('  -r, --run run-file [run-files ... ] : run the files.');
  console.log('');
  console.log('Example:');
  console.log('  simple REPL                         : $ arcjs');
  console.log('  set preload-files for REPL          : $ arcjs lib.fasl lib2.arc');
  console.log('  script runner                       : $ arcjs -r script.arc srcipt2.arc');
  console.log('');
  process.exit();
}

if (-1 < scripts.indexOf('-v') || -1 < scripts.indexOf('--version')) {
  console.log(ArcJS.version);
  process.exit();
}

main(mode, scripts);
